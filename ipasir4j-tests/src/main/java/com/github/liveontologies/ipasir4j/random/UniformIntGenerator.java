package com.github.liveontologies.ipasir4j.random;

/*-
 * #%L
 * Tests for Java IPASIR interfaces
 * $Id:$
 * $HeadURL:$
 * %%
 * Copyright (C) 2020 Live Ontologies Project
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */

import java.util.Random;

/**
 * An {@link IntGenerator} that generates values within a given range using a
 * uniform distribution.
 * 
 * @author Yevgeny Kazakov *
 */
public class UniformIntGenerator extends ZeroGenerator {

	private final Random random_;
	private final int minInclusive_, differentValueCount_;

	/**
	 * Creates a generator that uses a given number generator to generate a
	 * specified number of values within the given range
	 * 
	 * @param random
	 *            a random generator to be used for generating the values
	 * @param minInclusive
	 *            all generated values must be greater or equal than this value
	 * @param maxExclusive
	 *            all generated values must be smaller than this value
	 * @param valuesToGenerate
	 *            the number of values that can be generated by this generator
	 */
	public UniformIntGenerator(Random random, int minInclusive,
			int maxExclusive, int valuesToGenerate) {
		super(valuesToGenerate);
		this.random_ = random;
		this.minInclusive_ = minInclusive;
		this.differentValueCount_ = maxExclusive - minInclusive;
	}

	@Override
	public int getNextValue() {
		super.getNextValue();
		return minInclusive_ + random_.nextInt(differentValueCount_);
	}

}
